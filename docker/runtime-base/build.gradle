plugins {
    id 'com.bmuschko.docker-remote-api'
}

evaluationDependsOn ':docker-java-and-python'
evaluationDependsOn ':deephaven-jpy'
evaluationDependsOn ':deephaven-wheel'
evaluationDependsOn ':deephaven2-wheel'

def runtimeBaseExtras = project.property('deephaven.runtime-base.extras')

def dockerContext = project.layout.buildDirectory.dir('context')

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    // deephaven-jpy.whl
    def deephavenJpyWheel = project(':deephaven-jpy').tasks.getByName('buildWheel')

    // deephaven.whl
    def deephavenWheel = project(':deephaven-wheel').tasks.getByName('buildWheel')

    // deephaven2.whl
    def deephaven2Wheel = project(':deephaven2-wheel').tasks.getByName('buildWheel')

    from (deephavenJpyWheel.outputs.files) {
        into 'deephaven-jpy-wheel'
    }
    from (deephavenWheel.outputs.files) {
        into 'deephaven-wheel'
    }
    from (deephaven2Wheel.outputs.files) {
        into 'deephaven2-wheel'
    }

    from 'src/main/docker'
    into dockerContext
}

def buildImage = Docker.registerDockerImage(project, 'buildImage') {
    description = "Creates 'deephaven/runtime-base:local-build'."

    imageIdFile.set project.layout.buildDirectory.file(".docker/${runtimeBaseExtras}/buildImage-imageId.txt")

    // deephaven/java-and-python:local-build
    def javaAndPython = project(':docker-java-and-python').tasks.getByName('buildDocker')
    dependsOn prepareDocker
    inputs.files javaAndPython.outputs.files
    inputDir.set dockerContext
    buildArgs.put('EXTRA_REQS', "${runtimeBaseExtras}/strict.txt")
    target = 'runtime-base'
    images.add('deephaven/runtime-base:local-build')
}

Docker.registerDockerTask(project, 'freezeDesired') {
    containerDependencies.dependsOn = prepareDocker
    copyIn {
        from dockerContext
    }

    imageIdFile = project.layout.buildDirectory.file(".docker/${runtimeBaseExtras}/freezeDesired-imageId.txt").get()

    // For the maintenance image, we will let the the wheels and desired requirements file (along with pip manager)
    // install the versions they see fit, which will likely be the newest images that meet the requirements. This
    buildArgs = [
            // Don't pre-install the requirements
            REQUIREMENTS: 'empty.txt',

            // this allows us to choose the desired (non-strict) extra requirements
            EXTRA_REQS: "${runtimeBaseExtras}/desired.txt",

            // this allows pip to install from internet
            NO_INDEX: '']
    target = 'freeze'
    containerOutPath = '/tmp/pip'
    copyOut {
        into "build/freeze/${runtimeBaseExtras}"
    }
}

assemble.dependsOn buildImage