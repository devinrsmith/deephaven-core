import com.bmuschko.gradle.docker.tasks.image.Dockerfile

plugins {
    id 'com.bmuschko.docker-remote-api'
    id 'com.avast.gradle.docker-compose'
}

evaluationDependsOn ':server'

def runtimeImage = project(':server').tasks.getByName('buildImage')

def runInDocker = { String name, String sourcePath, List<String> command ->
    Docker.registerDockerTask(project, name) {
        copyIn {
            from(sourcePath) {
                into 'python'
            }
            from(test.runtimeClasspath) {
                into 'classpath'
            }

            // Unpack the config contents for now, since we don't seem to read the configs from inside a jar.
            // This does not add a task dependency, but we already put :configs in the testRuntime classpath,
            // so it is part of the previous statement
            from(zipTree(project(':configs').tasks.getByName('jar').outputs.files.singleFile)) {
                into 'python/configs'
            }
        }
        parentContainers = [tasks.findByName('buildDeephavenPython')] // deephaven/runtime-base

        imageName = 'deephaven/py-integrations:local-build'

        network = dockerCompose.projectName.toLowerCase() + '_default'
        containerDependencies.dependsOn = dockerCompose.upTask
        containerDependencies.finalizedBy = dockerCompose.downTask

        dockerfile {
            // set up the container, env vars - things that aren't likely to change
            from 'deephaven/runtime-base:local-build'
            runCommand '''set -eux; \\
                      pip3 install unittest-xml-reporting==3.0.4;\\
                      mkdir -p /out/report;\\
                      mkdir -p /workspace/cache/classes'''
            environmentVariable 'DEEPHAVEN_CLASSPATH', '/classpath/*:/classpath'
            environmentVariable 'DEEPHAVEN_WORKSPACE', '/workspace'
            environmentVariable 'DEEPHAVEN_DEVROOT', '/python'
            environmentVariable 'DEEPHAVEN_PROPFILE', 'dh-defaults.prop'
            environmentVariable 'JDK_HOME', '/usr/lib/jvm/zulu8/jre/'
            environmentVariable 'JAVA_VERSION', '1.8'
            environmentVariable 'DEEPHAVEN_VERSION', project.version

            workingDir '/python'

            // copy in the contents that we do expect to change as the project updates
            copyFile 'python', '/python'
            copyFile 'classpath', '/classpath'
        }
        entrypoint = command

        copyOut {
            into layout.buildDirectory.dir('test-results')
        }
    }
}