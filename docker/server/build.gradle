import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id 'com.bmuschko.docker-remote-api'
}

evaluationDependsOn ':deephaven-jpy'
evaluationDependsOn ':deephaven-wheel'
evaluationDependsOn ':deephaven2-wheel'
evaluationDependsOn ':grpc-api-server-native'

def dockerContext = project.layout.buildDirectory.dir('context')
def commonDir = rootProject.layout.projectDirectory.dir('docker/common')

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    // deephaven-jpy.whl
    def deephavenJpyWheel = project(':deephaven-jpy').tasks.getByName('buildDockerForWheel')

    // deephaven.whl
    def deephavenWheel = project(':deephaven-wheel').tasks.getByName('buildWheel')

    // deephaven2.whl
    def deephaven2Wheel = project(':deephaven2-wheel').tasks.getByName('buildWheel')

    // server.tar
    def grpcApiTar = project(':grpc-api-server-native').tasks.getByName('distTar')

    it.from (commonDir) {
        into 'common'
    }
    it.from (deephavenJpyWheel.outputs.files) {
        into 'deephaven-jpy-wheel'
    }
    it.from (deephavenWheel.outputs.files) {
        into 'deephaven-wheel'
    }
    it.from (deephaven2Wheel.outputs.files) {
        into 'deephaven2-wheel'
    }
    it.from (grpcApiTar.outputs.files) {
        rename { file -> 'server.tar' }
        into 'server'
    }
    it.from 'src/main/docker'
    it.into dockerContext
}

def buildImage = { String name, String imageId, String outImage ->
    Docker.registerDockerImage(project, name) {
        dependsOn prepareDocker
        inputDir.set dockerContext
        // TODO: we don't have to explicitly set this if we use buildx
        buildArgs.put('TARGETARCH', 'amd64')
        buildArgs.put('BASE', imageId)
        images.add(outImage)
    } as TaskProvider<? extends DockerBuildImage>
}

def buildImageType = { String type ->
    def imageId = Docker.lookupImageId(project, project.property("deephaven.server${type}.base"))
    return buildImage("buildImage${type}", imageId, "deephaven/server${type}:local-build")
}

def types = [ '', '-nltk', '-pytorch', '-sklearn', '-tensorflow' ]

def builds = types.collect { buildImageType(it) }

assemble.dependsOn builds
