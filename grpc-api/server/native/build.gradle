plugins {
  id 'java'
  id 'application'
}

dependencies {
  implementation(project(':grpc-api')) {
    // way too many dependencies right now
    // but at least we can cut-off slf4j-simple
    exclude group: 'org.slf4j', module: 'slf4j-simple'
  }

  runtimeOnly project(':log-to-slf4j')
  Classpaths.inheritSlf4j(project, 'jcl-over-slf4j', 'runtimeOnly')
  runtimeOnly project(':logback-print-stream-globals')
  runtimeOnly project(':logback-logbuffer')
  Classpaths.inheritLogbackClassic(project)

  // Note: if we want to switch back to DH-first logging, we would need to comment out the above and
  // enable something like the following:
  // runtimeOnly project(':slf4j-to-log')
  // runtimeOnly project(':log-to-stream')
  // runtimeOnly project(':log-to-logbuffer')
}

distributions {
  main {
    distributionBaseName = 'server'
  }
}

startScripts.enabled = false

def createStartScript = project.tasks.register('createStartScript', CreateStartScripts) {
  mainClassName = 'io.deephaven.grpc_api.runner.Main'
  applicationName = 'start'
  outputDir = new File(project.buildDir, name)
  classpath = startScripts.classpath
  defaultJvmOpts = [
          '-server',
          '-XX:+UseG1GC',
          '-XX:MaxGCPauseMillis=100',
          '-XX:+UseStringDeduplication',
          '-XshowSettings:vm' ]
}

applicationDistribution.into('bin') {
  from(createStartScript)
  fileMode = 0755
}

apply plugin: 'io.deephaven.java-open-nio'
