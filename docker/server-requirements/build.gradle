import com.bmuschko.gradle.docker.tasks.image.DockerInspectImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

plugins {
    id 'com.bmuschko.docker-remote-api'
}

String baseImage = project.property('deephaven.server-requirements.baseImage')
def baseImageIdFile = project.layout.buildDirectory.file(baseImage)

def pullImage = project.tasks.register('pullImage', DockerPullImage) {
    image.set baseImage
    //platform.set 'linux/amd64'
    onlyIf {
        !baseImageIdFile.get().asFile.exists()
    }
}

def writeBaseImageId = project.tasks.register('writeImageId', DockerInspectImage) {
    dependsOn pullImage
    imageId.set baseImage
    outputs.files baseImageIdFile
    outputs.upToDateWhen { false }
    onNext { message ->
        baseImageIdFile.get().asFile.text = message.id
    }
    onError { exception ->
        if (!exception.message.contains('No such image'))
            throw exception
        throw exception
    }
}

def buildDocker = Docker.registerDockerImage(project, 'buildDocker') {
    inputDir.set project.layout.projectDirectory.dir('src/main/docker')

    inputs.files writeBaseImageId.get().outputs.files
    buildArgs.put('BASE', baseImage)
    // TODO: we don't have to explicitly set this if we use buildx
    buildArgs.put('TARGETARCH', 'amd64')
    images.add('deephaven/server-requirements:local-build')
}

assemble.dependsOn buildDocker