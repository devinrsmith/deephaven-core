plugins {
    id 'com.bmuschko.docker-remote-api'
}

evaluationDependsOn ':docker-server-slim'
evaluationDependsOn ':grpc-api-server-native'
evaluationDependsOn ':deephaven-jpy'
evaluationDependsOn ':deephaven-wheel'
evaluationDependsOn ':deephaven2-wheel'

def dockerContext = project.layout.buildDirectory.dir('context')

def prepareDocker = project.tasks.register('prepareDocker', Sync) {
    def distTar = project.project(':grpc-api-server-native').tasks.findByName('distTar')

    // deephaven-jpy.whl
    def deephavenJpyWheel = project(':deephaven-jpy').tasks.getByName('buildWheel')

    // deephaven.whl
    def deephavenWheel = project(':deephaven-wheel').tasks.getByName('buildWheel')

    // deephaven2.whl
    def deephaven2Wheel = project(':deephaven2-wheel').tasks.getByName('buildWheel')

    from (deephavenJpyWheel.outputs.files) {
        into 'deephaven-jpy-wheel'
    }
    from (deephavenWheel.outputs.files) {
        into 'deephaven-wheel'
    }
    from (deephaven2Wheel.outputs.files) {
        into 'deephaven2-wheel'
    }
    from(distTar) {
        into 'distributions'
    }
    from 'src/main/docker'
    into dockerContext
}

def buildImage = Docker.registerDockerImage(project, 'buildImage') {
    description = "Creates 'deephaven/server-base-python:local-build'."

    // deephaven/server-slim:local-build
    def javaAndPython = project(':docker-server-slim').tasks.getByName('buildImage')
    dependsOn prepareDocker
    inputs.files javaAndPython.outputs.files
    inputDir.set dockerContext
    images.add('deephaven/server-base-python:local-build')
}

assemble.dependsOn buildImage